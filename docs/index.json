[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Parser.js",
    "content": "/**\n * Parser - Receives any strategy and safely implement it\n *\n * @constructor\n * @param {Base} strategy - Any strategy implementing the Base's prototype\n */\nfunction Parser (strategy) {\n  this.strategy = strategy\n}\n\n/**\n * Parser.prototype.parse - Exposes the parsing from string to any valid JS type with the strategy\n *\n * @param {string} data\n * @param {object} options\n */\nParser.prototype.parse = function parse (data, options) {\n  return this.strategy.parse(data, options)\n}\n\n/**\n * Parser.prototype.stringify - Exposes the stringify() method from any valid JS type to expected type with the strategy\n *\n * @param {*} data\n * @param {object} options\n */\nParser.prototype.stringify = function stringify (data, options) {\n  return this.strategy.stringify(data, options)\n}\n\n/**\n * Parser.prototype.valid - Exposes the valid() method from strategy. Checks if given data is valid\n *\n * @param {string} data\n * @param {object} options\n */\nParser.prototype.valid = function stringify (data, options) {\n  return this.strategy.valid(data, options)\n}\n\n/**\n * Parser.prototype.pipeStringify - Exposes the pipeStringify() method from strategy. Streams data through stringify\n */\nParser.prototype.pipeStringify = function pipeStringify () {\n  return this.strategy.pipeStringify()\n}\n\n/**\n * Parser.prototype.pipeParse - Exposes the pipeParse() method from strategy. Streams data through parse\n */\nParser.prototype.pipeParse = function pipeParse () {\n  return this.strategy.pipeParse()\n}\n\nParser.prototype.get = function get (data, path) {}\n\nParser.prototype.has = function has (data, path) {}\n\nmodule.exports = Parser\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/Parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "Parser",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~Parser",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser - Receives any strategy and safely implement it",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Base"
        ],
        "spread": false,
        "optional": false,
        "name": "strategy",
        "description": "Any strategy implementing the Base's prototype"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "parse",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser.prototype.parse - Exposes the parsing from string to any valid JS type with the strategy",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser.prototype.stringify - Exposes the stringify() method from any valid JS type to expected type with the strategy",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "valid",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~valid",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser.prototype.valid - Exposes the valid() method from strategy. Checks if given data is valid",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "pipeStringify",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~pipeStringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser.prototype.pipeStringify - Exposes the pipeStringify() method from strategy. Streams data through stringify",
    "lineNumber": 44,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "pipeParse",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~pipeParse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": "Parser.prototype.pipeParse - Exposes the pipeParse() method from strategy. Streams data through parse",
    "lineNumber": 51,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "get",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~get",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "has",
    "memberof": "src/Parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Parser.js~has",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/Parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/errors/NotImplemented.js",
    "content": "/**\n * NotImplemented\n */\nfunction NotImplemented () {\n  this.name = 'NotImplemented'\n  this.message = 'This method haven\\'t been implemented yet'\n}\n\nNotImplemented.prototype = new Error()\n\nmodule.exports = NotImplemented\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/errors/NotImplemented.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "NotImplemented",
    "memberof": "src/errors/NotImplemented.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/NotImplemented.js~NotImplemented",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/errors/NotImplemented.js",
    "importStyle": null,
    "description": "NotImplemented",
    "lineNumber": 4,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/errors/ParserError.js",
    "content": "/**\n * ParseError\n *\n * @param {string} format - which format the error ocurred\n * @param {object} context - any context info for debugging\n */\nfunction ParseError (format, context = {}) {\n  this.name = 'ParseError'\n  this.message = `Failed to parse ${format}`\n  this.context = context\n}\n\nParseError.prototype = new Error()\n\nmodule.exports = ParseError\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/errors/ParserError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "ParseError",
    "memberof": "src/errors/ParserError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/ParserError.js~ParseError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/errors/ParserError.js",
    "importStyle": null,
    "description": "ParseError",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "which format the error ocurred"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "any context info for debugging"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/index.js",
    "content": "const {\n  Json,\n  Xml,\n  Yaml,\n  Csv\n} = require('./strategies')\nconst Parser = require('./Parser')\n\nmodule.exports = {\n  json: new Parser(new Json()),\n  xml: new Parser(new Xml()),\n  yaml: new Parser(new Yaml()),\n  csv: new Parser(new Csv())\n}\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "Json",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Json",
    "access": "public",
    "export": false,
    "importPath": "parserblade",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "Parser",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Parser",
    "access": "public",
    "export": false,
    "importPath": "parserblade",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/strategies/Base.js",
    "content": "const NotImplemented = require('../errors/NotImplemented')\nconst ParserError = require('../errors/ParserError')\n\n/**\n * Base class for strategies around the Parser\n * Every function that haven't been implemented\n * will throw an NotImplementedError\n *\n * @constructor\n */\nfunction Base () {}\n\n/**\n * Base.prototype.stringify - receives * form of data and turns it into a string\n *\n * @param {*} data\n * @param {object} options\n * @throws {NotImplemented} This method must be implemented\n */\nBase.prototype.stringify = function stringify (data, options) {\n  throw new NotImplemented()\n}\n\n/**\n * Base.prototype.parse - receives an string and translate it to valid JavaScript\n *\n * @param {string} data\n * @param {object} options\n * @throws {NotImplemented} This method must be implemented\n */\nBase.prototype.parse = function parse (data, options) {\n  throw new NotImplemented()\n}\n\n/**\n * Base.prototype.pipe - prototype for streams\n *\n * @throws {NotImplemented} This method must be implemented\n */\nBase.prototype.pipe = function pipe () {\n  throw new NotImplemented()\n}\n\n/**\n * Base.prototype.valid - checks if a given value is valid in desired format using the implemented method parse(), ignoring any exception\n *\n * @param {object} options - any option accepted for the implemented method parse()\n * @returns {boolean} wether or not the given data is a valid format\n */\nBase.prototype.valid = function valid (data, options = {}) {\n  try {\n    this.parse(data, options)\n    return true\n  } catch (error) {\n    if (error instanceof ParserError) {\n      return false\n    }\n\n    throw error\n  }\n}\n\n/**\n * Base.prototype.pipeParse - prototype for streams\n *\n * @throws {NotImplemented} This method must be implemented\n */\nBase.prototype.pipeParse = function pipeParse () {\n  throw new NotImplemented()\n}\n\n/**\n * Base.prototype.pipeStringify - prototype for streams\n *\n * @throws {NotImplemented} This method must be implemented\n */\nBase.prototype.pipeStringify = function pipeStringify () {\n  throw new NotImplemented()\n}\n\nmodule.exports = Base\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Base.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "NotImplemented",
    "memberof": "src/strategies/Base.js",
    "static": true,
    "longname": "src/strategies/Base.js~NotImplemented",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "ParserError",
    "memberof": "src/strategies/Base.js",
    "static": true,
    "longname": "src/strategies/Base.js~ParserError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "Base",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~Base",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base class for strategies around the Parser\nEvery function that haven't been implemented\nwill throw an NotImplementedError",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.stringify - receives * form of data and turns it into a string",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "parse",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.parse - receives an string and translate it to valid JavaScript",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "pipe",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~pipe",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.pipe - prototype for streams",
    "lineNumber": 40,
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "valid",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~valid",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.valid - checks if a given value is valid in desired format using the implemented method parse(), ignoring any exception",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} wether or not the given data is a valid format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "any option accepted for the implemented method parse()"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "wether or not the given data is a valid format"
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "pipeParse",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~pipeParse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.pipeParse - prototype for streams",
    "lineNumber": 68,
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "pipeStringify",
    "memberof": "src/strategies/Base.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Base.js~pipeStringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Base.js",
    "importStyle": null,
    "description": "Base.prototype.pipeStringify - prototype for streams",
    "lineNumber": 77,
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/strategies/Csv.js",
    "content": "const Base = require('./Base')\nconst ParserError = require('../errors/ParserError')\nconst csvParser = require('csv-parse/lib/sync')\nconst csvStringify = require('csv-stringify/lib/sync')\n\n/**\n * Csv - Support for CSV filetype\n *\n * @constructor\n */\nfunction Csv () {}\n\nCsv.prototype = Object.create(Base.prototype)\n\n/**\n * Csv.prototype.parse - receives an CSV string and returns valid JS\n *\n * @param {string} data\n * @param {object} options\n * @param {(boolean|array|function)} options.headers - If should parse first line as the headers, default is true\n * @param {(string|Buffer)} options.delimiter - Which delimiters to use when parsing, defaults to comma `,`\n * @param {number} options.skipLines - How many lines it should skip before parsing, defaults to 1\n * @param {number} options.offset - How many lines it should parse, defaults to -1\n * @returns {array}\n */\nCsv.prototype.parse = function parse (data, options = {}) {\n  const config = {\n    columns: true,\n    skip_empty_lines: true,\n    delimiter: options.delimiter || ',',\n    from_line: options.skipLines || 1\n  }\n\n  if (Object.prototype.hasOwnProperty.apply(options, ['headers'])) {\n    config.columns = options.headers\n  }\n\n  if (options.offset) {\n    config.to_line = options.offset\n  }\n\n  try {\n    return csvParser(data, config)\n  } catch (e) {\n    const context = {\n      code: e.code,\n      message: e.message,\n      column: e.column,\n      emptyLines: e.empty_lines,\n      header: e.header,\n      index: e.index,\n      lines: e.lines,\n      quoting: e.quoting,\n      records: e.records\n    }\n\n    throw new ParserError('csv', context)\n  }\n}\n\n/**\n * Csv.prototype.stringify - receives * valid JS data and returns it as CSV\n *\n * @param {array} data\n * @param {object} options\n * @param {boolean} options.headers - If should set first line as the headers, default is true\n * @param {(array|object)} options.columns - Custom column mapping, see examples for more\n * @returns {string}\n */\nCsv.prototype.stringify = function stringify (data, options = {}) {\n  const config = {\n    header: true\n  }\n\n  if (options.headers === false) {\n    config.header = false\n  }\n\n  if (options.columns) {\n    config.columns = options.columns\n  }\n\n  return csvStringify(data, config)\n}\n\nmodule.exports = Csv\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Csv.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "Base",
    "memberof": "src/strategies/Csv.js",
    "static": true,
    "longname": "src/strategies/Csv.js~Base",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "ParserError",
    "memberof": "src/strategies/Csv.js",
    "static": true,
    "longname": "src/strategies/Csv.js~ParserError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "csvParser",
    "memberof": "src/strategies/Csv.js",
    "static": true,
    "longname": "src/strategies/Csv.js~csvParser",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "csvStringify",
    "memberof": "src/strategies/Csv.js",
    "static": true,
    "longname": "src/strategies/Csv.js~csvStringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "Csv",
    "memberof": "src/strategies/Csv.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Csv.js~Csv",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": "Csv - Support for CSV filetype",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "parse",
    "memberof": "src/strategies/Csv.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Csv.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": "Csv.prototype.parse - receives an CSV string and returns valid JS",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "array",
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.headers",
        "description": "If should parse first line as the headers, default is true"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "options.delimiter",
        "description": "Which delimiters to use when parsing, defaults to comma `,`"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.skipLines",
        "description": "How many lines it should skip before parsing, defaults to 1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.offset",
        "description": "How many lines it should parse, defaults to -1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/strategies/Csv.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Csv.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Csv.js",
    "importStyle": null,
    "description": "Csv.prototype.stringify - receives * valid JS data and returns it as CSV",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.headers",
        "description": "If should set first line as the headers, default is true"
      },
      {
        "nullable": null,
        "types": [
          "array",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.columns",
        "description": "Custom column mapping, see examples for more"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/strategies/Json.js",
    "content": "const Base = require('./Base')\nconst ParserError = require('../errors/ParserError')\nconst JSONStream = require('JSONStream')\n\n/**\n * Json - Support for JSON filetype\n *\n * @constructor\n */\nfunction Json () {}\n\nJson.prototype = Object.create(Base.prototype)\n\n/**\n * Json.prototype.parse - receives an JSON string and returns valid JS\n *\n * @param {string} data\n * @throws {ParserError} In case the JSON string is not valid, ParserError will be thrown\n * @returns {*}\n */\nJson.prototype.parse = function parse (data) {\n  try {\n    return JSON.parse(data)\n  } catch (e) {\n    throw new ParserError('json')\n  }\n}\n\n/**\n * Json.prototype.stringify - receives * valid JS data and returns it as JSON\n *\n * @param {*} data\n * @returns {string}\n */\nJson.prototype.stringify = function stringify (data) {\n  return JSON.stringify(data)\n}\n\n/**\n * Json.prototype.pipeStringify - helps to stream object or array into JSON valid data\n *\n * @param {object} [config] - sets config for stream\n * @param {string} [config.type='array'] - which type of data you're streaming, defaults do array\n * @returns {WritableStream}\n */\nJson.prototype.pipeStringify = function pipeStringify (config = {}) {\n  config.type = config.type || 'array'\n  const streams = {\n    object: JSONStream.stringifyObject,\n    array: JSONStream.stringify\n  }\n\n  const fn = streams[config.type]\n\n  if (!fn) {\n    throw new ParserError(`Supplied type \"${config.type}\" is not allowed. Use either \"array\" or \"object\"`)\n  }\n\n  return fn()\n}\n\n/**\n * Json.prototype.pipeStringify - helps to stream JSON data to JS\n *\n * @param {object} [config] - sets config for stream\n * @param {string} [config.path] - select which data path to be parsed from JSON to JS\n * @returns {Stream}\n */\nJson.prototype.pipeParse = function pipeParse (config) {\n  return JSONStream.parse()\n}\n\nmodule.exports = Json\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "Base",
    "memberof": "src/strategies/Json.js",
    "static": true,
    "longname": "src/strategies/Json.js~Base",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ParserError",
    "memberof": "src/strategies/Json.js",
    "static": true,
    "longname": "src/strategies/Json.js~ParserError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "JSONStream",
    "memberof": "src/strategies/Json.js",
    "static": true,
    "longname": "src/strategies/Json.js~JSONStream",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "Json",
    "memberof": "src/strategies/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Json.js~Json",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": "Json - Support for JSON filetype",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "parse",
    "memberof": "src/strategies/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Json.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": "Json.prototype.parse - receives an JSON string and returns valid JS",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "ParserError"
        ],
        "description": "In case the JSON string is not valid, ParserError will be thrown"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/strategies/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Json.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": "Json.prototype.stringify - receives * valid JS data and returns it as JSON",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "pipeStringify",
    "memberof": "src/strategies/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Json.js~pipeStringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": "Json.prototype.pipeStringify - helps to stream object or array into JSON valid data",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WritableStream}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "sets config for stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'array'",
        "defaultRaw": "'array'",
        "name": "config.type",
        "description": "which type of data you're streaming, defaults do array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WritableStream"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "pipeParse",
    "memberof": "src/strategies/Json.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Json.js~pipeParse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Json.js",
    "importStyle": null,
    "description": "Json.prototype.pipeStringify - helps to stream JSON data to JS",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Stream}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "sets config for stream"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "config.path",
        "description": "select which data path to be parsed from JSON to JS"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/strategies/Xml/XmlTag.js",
    "content": "function XmlDeclaration (version, encoding) {\n  this.name = 'declaration'\n  this.version = version\n  this.encoding = encoding\n}\n\nfunction XmlTag (name, value, attributes, tags) {\n  this.name = name\n  this.value = value\n  this.attributes = attributes\n  this.tags = tags\n}\n\nXmlTag.prototype.reset = function reset () {\n  return new XmlTag(this.name, this.value, this.attributes, this.tags)\n}\n\nfunction XmlCharacterData (cdata) {\n  this.name = 'cdata'\n  this.cdata = cdata\n}\n\nmodule.exports = { XmlTag, XmlDeclaration, XmlCharacterData }\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Xml/XmlTag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "XmlDeclaration",
    "memberof": "src/strategies/Xml/XmlTag.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/XmlTag.js~XmlDeclaration",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/XmlTag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "version",
        "types": [
          "*"
        ]
      },
      {
        "name": "encoding",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "XmlTag",
    "memberof": "src/strategies/Xml/XmlTag.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/XmlTag.js~XmlTag",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/XmlTag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "tags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "reset",
    "memberof": "src/strategies/Xml/XmlTag.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/XmlTag.js~reset",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/XmlTag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "XmlCharacterData",
    "memberof": "src/strategies/Xml/XmlTag.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/XmlTag.js~XmlCharacterData",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/XmlTag.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "cdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/strategies/Xml/index.js",
    "content": "const Base = require('../Base')\nconst ParserError = require('../../errors/ParserError')\nconst xml = require('xml-js')\nconst NotImplemented = require('../../errors/NotImplemented')\nconst { Transform } = require('stream')\nconst StreamParser = require('node-xml-stream')\nconst { XmlTag, XmlCharacterData, XmlDeclaration } = require('./XmlTag')\n\n/**\n * Xml - Support for XML filetype\n *\n * @constructor\n */\nfunction Xml () {\n  this.XML_VERSION_TAG = {\n    _declaration: {\n      _attributes: {\n        version: '1.0',\n        encoding: 'utf-8'\n      }\n    }\n  }\n\n  this.XML_JS_KEYS = {\n    declarationKey: '_declaration',\n    instructionKey: '_instruction',\n    attributesKey: '_attributes',\n    textKey: '_text',\n    cdataKey: '_cdata',\n    doctypeKey: '_doctype',\n    commentKey: '_comment',\n    parentKey: '_parent',\n    typeKey: '_type',\n    nameKey: '_name',\n    elementsKey: '_elements'\n  }\n}\n\nXml.prototype = Object.create(Base.prototype)\n\n/**\n * Xml.prototype.setXmlDeclaration - sets XML declaration tag on first position of array or object\n *\n * @param {(object|array)} data - input data\n * @returns {(object|array)}\n */\nXml.prototype.setXmlDeclaration = function setXmlDeclaration (data) {\n  if (Array.isArray(data)) {\n    data = [this.XML_VERSION_TAG, ...data]\n  } else {\n    data = { ...this.XML_VERSION_TAG, ...data }\n  }\n\n  return data\n}\n\n/**\n * Xml.prototype.stringify - receives * valid JS data and returns it as XML\n *\n * @param {(object|array)} data\n * @param {Object} options - options for turning JS data into XML\n * @param {boolean} options.ignoreDeclaration - don't output XML version tag, default is true\n * @returns {string}\n */\nXml.prototype.stringify = function stringify (data, options = {}) {\n  const config = {\n    compact: true,\n    ignoreDeclaration: false\n  }\n\n  data = this.setXmlDeclaration(data)\n\n  if (options.ignoreDeclaration) {\n    config.ignoreDeclaration = true\n  }\n\n  return xml.js2xml(data, config)\n}\n\n/**\n * Xml.prototype.parse - receives an XML string and translate it to valid JavaScript\n *\n * @param {string} data\n * @param {object} options\n * @param {object} options.showDeclaration - force parsing XML declaration tag\n * @param {boolean} options.verbose - makes xml2js return non compact mode, defaults to false\n * @param {boolean} options.experimentalXmlTag - use experimental XmlTag prototype, default is false\n * @throws {NotImplemented} This method must be implemented\n */\nXml.prototype.parse = function parse (data, options = {}) {\n  try {\n    const config = {\n      compact: true,\n      ignoreDeclaration: true,\n      nativeType: true,\n      nativeTypeAttributes: true\n    }\n\n    if (options.showDeclaration) {\n      config.ignoreDeclaration = false\n    }\n\n    if (options.verbose) {\n      config.compact = false\n    }\n\n    const result = xml.xml2js(data, config)\n\n    if (options.experimentalXmlTag) {\n      return this.toXmlTag(result)\n    }\n\n    return result\n  } catch (error) {\n    throw new ParserError(error.message)\n  }\n}\n\n/**\n * Xml.prototype.toXmlTag - turns xml2js non-compact result into XmlTag and XmlResult\n *\n * @param {object} xml2jsResult\n * @throws {NotImplemented}\n */\nXml.prototype.toXmlTag = function toXmlTag (xml2jsResult) {\n  throw new NotImplemented()\n}\n\n/**\n * Xml.prototype.pipeParse - stream\n *\n * @param {object} [options]\n * @param {Number} [options.depth=0]\n */\nXml.prototype.pipeParse = function pipeParse (options = {}) {\n  options.depth = options.depth || 0\n  const parser = new StreamParser()\n\n  let index = 0\n  let parsedTags = new Map()\n  const toEmit = []\n  const lastTag = {\n    index: null,\n    name: null,\n    tagIndex: null\n  }\n\n  const getFirstTagName = map => {\n    if (map.has(0) === false) {\n      return null\n    }\n\n    const mapPosZero = map.get(0)\n    const arrayMap = Array.from(mapPosZero)\n\n    if (arrayMap.length === 0) {\n      return null\n    }\n\n    const keyValue = arrayMap[0]\n\n    if (keyValue.length === 0) {\n      return null\n    }\n\n    return keyValue[0]\n  }\n\n  parser.on('opentag', (name, attrs) => {\n    const inheritFrom = {\n      index: null,\n      name: null\n    }\n\n    if (index >= 1) {\n      const beforeIndex = index - 1\n      const beforeKey = [\n        ...parsedTags\n          .get(beforeIndex)\n          .keys()\n      ].reverse()[0]\n      inheritFrom.index = beforeIndex\n      inheritFrom.name = beforeKey\n    }\n\n    if (!parsedTags.has(index)) {\n      parsedTags.set(index, new Map())\n    }\n\n    if (!parsedTags.get(index).has(name)) {\n      parsedTags.get(index).set(name, [])\n    }\n\n    const tag = new XmlTag(name, null, attrs, [])\n    tag.inheritFrom = inheritFrom\n\n    lastTag.index = index\n    lastTag.name = name\n    lastTag.tagIndex = parsedTags.get(index).get(name).push(tag) - 1\n    tag.inheritFrom.tagIndex = lastTag.tagIndex\n    index = index + 1\n  })\n\n  parser.on('text', (text) => {\n    parsedTags\n      .get(lastTag.index)\n      .get(lastTag.name)[lastTag.tagIndex]\n      .value = text\n\n    lastTag.index = null\n    lastTag.name = null\n    lastTag.tagIndex = null\n  })\n\n  parser.on('closetag', (name) => {\n    index = index - 1\n\n    if (index === options.depth) {\n      /**\n       * must reorganize data to a single object\n       * them emit it\n      */\n      let entries = Array.from(parsedTags).reverse()\n      entries = entries.map(\n        ([intIndex, tagsMap]) => ({\n          intIndex, tagsMap: Array.from(tagsMap).reverse()\n        })\n      )\n      entries.pop()\n      entries.forEach(entry => {\n        const intIndex = entry.intIndex === 0 ? entry.intIndex : entry.intIndex - 1\n        const indexedTags = parsedTags.get(intIndex)\n\n        entry.tagsMap.forEach(tag => {\n          const list = tag[1]\n          list.forEach(tagToBePushed => {\n            indexedTags\n              .get(tagToBePushed.inheritFrom.name)[0]\n              .tags\n              .push(tagToBePushed.reset())\n          })\n        })\n      })\n\n      parsedTags\n        .get(index)\n        .get(name)\n        .forEach(tag => toEmit.push(tag.reset()))\n    }\n\n    if (name === getFirstTagName(parsedTags)) {\n      parsedTags = new Map()\n    }\n  })\n\n  parser.on('cdata', cdata => {\n    const CData = new XmlCharacterData(cdata)\n    toEmit.push(CData)\n  })\n\n  parser.on('instruction', (name, attrs) => {\n    const declaration = new XmlDeclaration(attrs.version, attrs.encoding)\n    toEmit.push(declaration)\n  })\n\n  return new Transform({\n    objectMode: true,\n    transform (chunk, encoding, ack) {\n      parser.write(chunk.toString())\n\n      if (toEmit.length > 0) {\n        this.push(toEmit.shift())\n      }\n\n      ack()\n    }\n  })\n}\n\nmodule.exports = Xml\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Xml/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "Base",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~Base",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "ParserError",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~ParserError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "xml",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~xml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "NotImplemented",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~NotImplemented",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "Transform",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~Transform",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "StreamParser",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~StreamParser",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "XmlTag",
    "memberof": "src/strategies/Xml/index.js",
    "static": true,
    "longname": "src/strategies/Xml/index.js~XmlTag",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "Xml",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~Xml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml - Support for XML filetype",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "setXmlDeclaration",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~setXmlDeclaration",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml.prototype.setXmlDeclaration - sets XML declaration tag on first position of array or object",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{(object|array)}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "input data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml.prototype.stringify - receives * valid JS data and returns it as XML",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object",
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for turning JS data into XML"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.ignoreDeclaration",
        "description": "don't output XML version tag, default is true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "parse",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml.prototype.parse - receives an XML string and translate it to valid JavaScript",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.showDeclaration",
        "description": "force parsing XML declaration tag"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.verbose",
        "description": "makes xml2js return non compact mode, defaults to false"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.experimentalXmlTag",
        "description": "use experimental XmlTag prototype, default is false"
      }
    ],
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": "This method must be implemented"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "toXmlTag",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~toXmlTag",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml.prototype.toXmlTag - turns xml2js non-compact result into XmlTag and XmlResult",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "xml2jsResult",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "NotImplemented"
        ],
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "pipeParse",
    "memberof": "src/strategies/Xml/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Xml/index.js~pipeParse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Xml/index.js",
    "importStyle": null,
    "description": "Xml.prototype.pipeParse - stream",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.depth",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/strategies/Yaml.js",
    "content": "const Base = require('./Base')\nconst ParserError = require('../errors/ParserError')\nconst yaml = require('js-yaml')\n\n/**\n * Yaml - Support for YAML filetype\n *\n * @constructor\n */\nfunction Yaml () {\n}\n\nYaml.prototype = Object.create(Base.prototype)\n\n/**\n * Yaml.prototype.stringify - receives * valid JS data and returns it as YAML\n *\n * @param {object} data\n * @param {Object} options - options for turning JS data into YAML\n * @throws {ParserError} For invalid data type\n * @returns {string}\n */\nYaml.prototype.stringify = function stringify (data, options = {}) {\n  if (Array.isArray(data)) {\n    throw new ParserError('Only plain objects are accepted for stringify()')\n  }\n\n  return yaml.safeDump(data)\n}\n\n/**\n * Yaml.prototype.parse - receives an YAML string and translate it to valid JavaScript\n *\n * @param {string} data\n * @param {object} options\n * @returns {object} Parsed YAML data as JS object\n */\nYaml.prototype.parse = function parse (data, options = {}) {\n  try {\n    return yaml.safeLoad(data)\n  } catch (e) {\n    const context = {\n      errorName: e.name,\n      message: e.message,\n      mark: e.mark\n    }\n\n    throw new ParserError('yaml', context)\n  }\n}\n\nmodule.exports = Yaml\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/Yaml.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "Base",
    "memberof": "src/strategies/Yaml.js",
    "static": true,
    "longname": "src/strategies/Yaml.js~Base",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "ParserError",
    "memberof": "src/strategies/Yaml.js",
    "static": true,
    "longname": "src/strategies/Yaml.js~ParserError",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "yaml",
    "memberof": "src/strategies/Yaml.js",
    "static": true,
    "longname": "src/strategies/Yaml.js~yaml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "Yaml",
    "memberof": "src/strategies/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Yaml.js~Yaml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": "Yaml - Support for YAML filetype",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/strategies/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Yaml.js~stringify",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": "Yaml.prototype.stringify - receives * valid JS data and returns it as YAML",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options for turning JS data into YAML"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "ParserError"
        ],
        "description": "For invalid data type"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "parse",
    "memberof": "src/strategies/Yaml.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/strategies/Yaml.js~parse",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/Yaml.js",
    "importStyle": null,
    "description": "Yaml.prototype.parse - receives an YAML string and translate it to valid JavaScript",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} Parsed YAML data as JS object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Parsed YAML data as JS object"
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/strategies/index.js",
    "content": "const Json = require('./Json')\nconst Xml = require('./Xml')\nconst Yaml = require('./Yaml')\nconst Csv = require('./Csv')\n\nmodule.exports = { Json, Xml, Yaml, Csv }\n",
    "static": true,
    "longname": "/home/onhernandes/code/parserblade/src/strategies/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "Json",
    "memberof": "src/strategies/index.js",
    "static": true,
    "longname": "src/strategies/index.js~Json",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "Xml",
    "memberof": "src/strategies/index.js",
    "static": true,
    "longname": "src/strategies/index.js~Xml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "Yaml",
    "memberof": "src/strategies/index.js",
    "static": true,
    "longname": "src/strategies/index.js~Yaml",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "Csv",
    "memberof": "src/strategies/index.js",
    "static": true,
    "longname": "src/strategies/index.js~Csv",
    "access": "public",
    "export": false,
    "importPath": "parserblade/src/strategies/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# parserblade\n\n![CI](https://github.com/onhernandes/parserblade/workflows/CI/badge.svg?branch=main)\n\nA all-in-one parser for Javascript, heavily inspired by: https://github.com/nathanmac/Parser. It allows you to work with JSON, XML, CSV and YAML more without worrying about which module install. It's designed to work just as `JSON.parse` and `JSON.stringify` does, with some improvements.\n\nSee [docs](https://onhernandes.github.io/parserblade) for more info and examples.\n\n## Installation\n\n```sh\n$ npm install --save parserblade\n```\n\n## Usage\n\nEvery filetype has two main methods: `stringify()` and `parse()`, both receives two arguments, `data` containing any type of data and an options object.\n\n### CSV\n\n```javascript\nconst { csv } = require('parserblade')\n\n// Parsing\nconst input = 'title,platform\\nStardew Valley,Steam'\nconst result = csv.parse(input)\nconsole.log(result) // [ { title: 'Stardew Valley', platform: 'Steam' } ]\n\n// Stringifying\nconsole.log(\n  csv.stringify(result)\n) // 'title,platform\\nStardew Valley,Steam'\n```\n\n### YAML\n\n```javascript\nconst { yaml } = require('parserblade')\n\n// Parsing\nconst input = 'title: Stardew Valley\\nplatform: Steam'\nconst result = yaml.parse(input)\nconsole.log(result) // { title: 'Stardew Valley', platform: 'Steam' }\n\n// Stringifying\nconsole.log(\n  yaml.stringify(result)\n) // 'title: Stardew Valley\\nplatform: Steam'\n```\n\n### XML\n\n```javascript\nconst { xml } = require('parserblade')\n\n// Parsing\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><package>lodash</package>'\nconst result = xml.parse(input)\nconsole.log(result) // { package: 'lodash' }\n\n// Stringifying\nconsole.log(\n  xml.stringify(result)\n) // '<?xml version=\"1.0\" encoding=\"utf-8\"?><package>lodash</package>'\n```\n\n## License\n\nMIT ©\n",
    "longname": "/home/onhernandes/code/parserblade/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"parserblade\",\n  \"version\": \"1.1.1\",\n  \"description\": \"The easiest parser for JSON, XML, CSV and YAML. Use it as simple as JSON.stringify() or JSON.parse(). All in one place.\",\n  \"homepage\": \"https://onhernandes.github.io/parserblade\",\n  \"author\": {\n    \"name\": \"Matheus Hernandes\",\n    \"email\": \"\",\n    \"url\": \"onhernandes.github.io\"\n  },\n  \"files\": [\n    \"src\"\n  ],\n  \"main\": \"src/index.js\",\n  \"keywords\": [\n    \"parser\",\n    \"data-parser\",\n    \"csv-parser\",\n    \"csv-stringify\",\n    \"transform-csv\",\n    \"csv\",\n    \"yaml-parser\",\n    \"yaml-stringify\",\n    \"transform-yaml\",\n    \"yaml\",\n    \"xml-parser\",\n    \"xml-stringify\",\n    \"transform-xml\",\n    \"xml\",\n    \"json\",\n    \"json-parser\"\n  ],\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.4.0\",\n    \"eslint-config-standard\": \"^14.1.1\",\n    \"eslint-plugin-import\": \"^2.22.0\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-standard\": \"^4.0.1\",\n    \"husky\": \"^3.0.9\",\n    \"jest\": \"^26.1.0\",\n    \"lint-staged\": \"^9.4.3\"\n  },\n  \"engines\": {\n    \"npm\": \">= 4.0.0\"\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/jest --no-cache\",\n    \"tdd\": \"./node_modules/.bin/jest --watch --no-cache\",\n    \"docs\": \"./node_modules/.bin/esdoc\",\n    \"lint\": \"./node_modules/.bin/eslint\",\n    \"publish-docs\": \"./node_modules/.bin/esdoc && git subtree push --prefix docs origin gh-pages\",\n    \"tarfile\": \"tar -czvf parserblade.tar.gz LICENSE package* README.md src\"\n  },\n  \"repository\": \"git@github.com:onhernandes/parserblade.git\",\n  \"jest\": {\n    \"testEnvironment\": \"node\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"JSONStream\": \"^1.3.5\",\n    \"csv-parse\": \"^4.11.1\",\n    \"csv-stringify\": \"^5.5.0\",\n    \"js-yaml\": \"^3.14.0\",\n    \"node-xml-stream\": \"^1.0.2\",\n    \"xml-js\": \"^1.6.11\"\n  }\n}\n",
    "longname": "/home/onhernandes/code/parserblade/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# parserblade\n\n![CI](https://github.com/onhernandes/parserblade/workflows/CI/badge.svg?branch=main)\n\nA all-in-one parser for Javascript, heavily inspired by: https://github.com/nathanmac/Parser. It allows you to work with JSON, XML, CSV and YAML more without worrying about which module install. It's designed to work just as `JSON.parse` and `JSON.stringify` does, with some improvements.\n\nSee [docs](https://onhernandes.github.io/parserblade) for more info and examples.\n\n## Installation\n\n```sh\n$ npm install --save parserblade\n```\n\n## Usage\n\nEvery filetype has two main methods: `stringify()` and `parse()`, both receives two arguments, `data` containing any type of data and an options object.\n\n### CSV\n\n```javascript\nconst { csv } = require('parserblade')\n\n// Parsing\nconst input = 'title,platform\\nStardew Valley,Steam'\nconst result = csv.parse(input)\nconsole.log(result) // [ { title: 'Stardew Valley', platform: 'Steam' } ]\n\n// Stringifying\nconsole.log(\n  csv.stringify(result)\n) // 'title,platform\\nStardew Valley,Steam'\n```\n\n### YAML\n\n```javascript\nconst { yaml } = require('parserblade')\n\n// Parsing\nconst input = 'title: Stardew Valley\\nplatform: Steam'\nconst result = yaml.parse(input)\nconsole.log(result) // { title: 'Stardew Valley', platform: 'Steam' }\n\n// Stringifying\nconsole.log(\n  yaml.stringify(result)\n) // 'title: Stardew Valley\\nplatform: Steam'\n```\n\n### XML\n\n```javascript\nconst { xml } = require('parserblade')\n\n// Parsing\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><package>lodash</package>'\nconst result = xml.parse(input)\nconsole.log(result) // { package: 'lodash' }\n\n// Stringifying\nconsole.log(\n  xml.stringify(result)\n) // '<?xml version=\"1.0\" encoding=\"utf-8\"?><package>lodash</package>'\n```\n\n## License\n\nMIT ©\n",
    "longname": "/home/onhernandes/code/parserblade/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/onhernandes/code/parserblade/esdocs/manual/json.md",
    "name": "./esdocs/manual/json.md",
    "content": "# JSON\n\n## Parse\n\nThere's no magic here. It just calls native's `JSON.parse`, currently there's no additional parameters.\n\n```javascript\nconst assert = require('assert')\nconst { json } = require('parserblade')\nconst input = '[{\"game\":\"Stardew Valley\"}]'\nconst result = json.parse(input)\n\nassert.deepStrictEqual(\n  result,\n  [ { game: 'Stardew Valley' } ]\n)\n```\n\n## Stringify\n\nThere's no magic here. It just calls native's `JSON.stringify`, currently there's no additional parameters.\n\n```javascript\nconst assert = require('assert')\nconst { json } = require('parserblade')\nconst input = [ { game: 'Stardew Valley' } ]\nconst result = json.stringify(input)\n\nassert.equal(\n  result,\n  '[{\"game\":\"Stardew Valley\"}]'\n)\n```\n\n## Valid\n\nJust checks if given string is a valid JSON data\n\n```javascript\nconst assert = require('assert')\nconst { json } = require('parserblade')\nconst result = json.valid('{')\n\nassert.equal(\n  result,\n  false\n)\n```\n\n## Stream\n\n### Stringify an array\n\n```javascript\nconst { json } = require('parserblade')\nconst { Readable } = require('stream')\nconst fs = require('fs')\n\nconst input = [{ game: 'Killing Floor' }, { game: 'Stardew Valley' }]\nconst reader = new Readable({\n  objectMode: true,\n  read (size) {\n    const next = input.shift()\n\n    if (!next) {\n      this.push(null)\n    } else {\n      this.push(next)\n    }\n  }\n})\n\nconst writer = json.pipeStringify()\nconst toFile = fs.createWriteStream('./data-test.json')\n\nreader\n  .pipe(writer)\n  .pipe(toFile)\n  .on('error', console.log)\n  .on('end', () => {\n    console.log('done')\n  })\n```\n\n### Stringify an object\n\nYou must pass `{ type: 'object' }` as param. Defaults to `array`. \n\nData must be an array of `[ key, value ]`. Like from `Object.entries({ game: 'Stardew Valley' })`\n\n```javascript\nconst { json } = require('parserblade')\nconst { Readable } = require('stream')\nconst fs = require('fs')\n\nconst input = Object.entries({\n  name: 'Rodolfo'\n})\n\nconst reader = new Readable({\n  objectMode: true,\n  read (size) {\n    const next = input.shift()\n\n    if (!next) {\n      this.push(null)\n    } else {\n      this.push(next)\n    }\n  }\n})\n\nconst writer = json.pipeStringify({ type: 'object' })\nconst toFile = fs.createWriteStream('./data-test.json')\n\nreader\n  .pipe(writer)\n  .pipe(toFile)\n  .on('error', console.log)\n  .on('end', () => {\n    console.log('done')\n  })\n```\n\n### Parse\n\n```javascript\nconst { json } = require('parserblade')\nconst fs = require('fs')\nconst path = require('path')\nconst filepath = path.resolve(__dirname, '../data/services.json')\n\nconst reader = fs.createReadStream(filepath)\nconst writer = json.pipeParse()\n\nreader\n  .pipe(writer)\n  .on('data', console.log)\n  .on('error', console.log)\n  .on('end', () => {\n    console.log('done')\n  })\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/onhernandes/code/parserblade/esdocs/manual/csv.md",
    "name": "./esdocs/manual/csv.md",
    "content": "# CSV\n\nWorks with CSV data. I haven't tested with xlsx or other similar data types yet.\n\n## Usage\n\nBoth `csv.parse()` and `csv.stringify()` accepts the data to be parsed/stringified as the first argument, and an option's object as the second.\n\n### Parse\n\nParses CSV string to JS data, automatically uses first line as headers. Pass data as first argument.\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'title,platform\\nStardew Valley,Steam'\nconst result = csv.parse(input)\n\nassert.deepStrictEqual(\n  result,\n  [ { title: 'Stardew Valley', platform: 'Steam' } ]\n)\n```\n\n#### Parse headers\n\nDon't use first line as headers. Pass `{ headers: false }` as second parameter.\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'name,email\\nNetflix,contact@netflix.com'\nconst result = csv.parse(input, { headers: false })\n\nassert.deepStrictEqual(\n  result,\n  [\n    ['name', 'email'],\n    ['Netflix', 'contact@netflix.com']\n  ]\n)\n```\n\nSpecify headers passing `{ headers: ['name', 'email'] }`\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'name,email\\nNetflix,contact@netflix.com'\nconst result = csv.parse(input, { headers: false })\n\nassert.deepStrictEqual(\n  result,\n  [\n    { name: 'Netflix', email: 'contact@netflix.com' }\n  ]\n)\n```\n\nSpecify a function to transform headers passing `{ headers: header => header.toUpperCase() }`\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'name,email\\nNetflix,contact@netflix.com'\nconst result = csv.parse(input, { headers: false })\n\nassert.deepStrictEqual(\n  result,\n  [\n    { NAME: 'Netflix', EMAIL: 'contact@netflix.com' }\n  ]\n)\n```\n\n#### Parse with custom delimiters\n\nUses custom delimiters. Anything you want! Pass `{ delimiter: ';' }` as option.\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'name;email\\nNetflix;contact@netflix.com'\nconst result = csv.parse(input, { delimiter: ';' })\n\nassert.deepStrictEqual(\n  result,\n  [ { name: 'Netflix', email: 'contact@netflix.com' } ]\n)\n```\n\n#### Parse skipping some lines\n\nPass `{ skipLines: 2 }` as option.\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'coll streaming platforms\\nname,email\\nNetflix,contact@netflix.com'\nconst result = csv.parse(input, { skipLines: 2 })\n\nassert.deepStrictEqual(\n  result,\n  [ { name: 'Netflix', email: 'contact@netflix.com' } ]\n)\n```\n\n#### Parse offset\n\nPass `{ offset: 2 }` as option.\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = 'name,email\\nNetflix,contact@netflix.com\\nAmazon,contact@amazon.com'\nconst result = csv.parse(input, { offset: 2 })\n\nassert.deepStrictEqual(\n  result,\n  [ { name: 'Netflix', email: 'contact@netflix.com' } ]\n)\n```\n\n### Stringify\n\nSimply transforms JS array of objects into CSV\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = [\n  { name: 'Netflix', email: 'contact@netflix.com' }\n]\nconst result = csv.stringify(input)\n\nassert.equal(\n  result,\n  'name,email\\nNetflix,contact@netflix.com'\n)\n```\n\n#### Stringify omitting headers\n\nPass `{ headers: false }` as options\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = [\n  { name: 'Netflix', email: 'contact@netflix.com' }\n]\nconst result = csv.stringify(input)\n\nassert.equal(\n  result,\n  'Netflix,contact@netflix.com'\n)\n```\n\n#### Stringify with custom column names/headers\n\nSpecifying custom columns is easy in many forms, like just pass `{ columns: [ { key: '', header: '' } ] }` as options.\n\nOr `{ columns: ['name', 'email'] }`.\n\nOr `{ columns: { name: 'Name', email: 'Email' } }`.\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst input = [\n  { name: 'Netflix', email: 'contact@netflix.com' }\n]\n\nconst columns = [\n  { key: 'name', header: 'Platform' },\n  { key: 'email', header: 'e-mail' }\n]\n\nconst result = csv.stringify(input, { columns })\n\nassert.equal(\n  result,\n  'Platform,e-mail\\nNetflix,contact@netflix.com'\n)\n```\n\n### Valid\n\nJust checks if given string is a valid CSV\n\n```javascript\nconst assert = require('assert')\nconst { csv } = require('parserblade')\nconst result = csv.valid('name\\nstardew,pokemon')\n\nassert.equal(\n  result,\n  false\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/onhernandes/code/parserblade/esdocs/manual/xml.md",
    "name": "./esdocs/manual/xml.md",
    "content": "# XML\n\nWorks with XML data. I haven't tested with xlsx or other similar data types yet. There's a lot of things to improve here.\n\n## Usage\n\nBoth `xml.parse()` and `xml.stringify()` accepts the data to be parsed/stringified as the first argument, and an option's object as the second.\n\n### Parse\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><games><name>Naruto Shippuden Storm 3</name><platform>playstation</platform></games>'\nconst result = xml.parse(input)\n\nassert.deepStrictEqual(\n  result,\n  {\n    games: {\n      name: { _text: 'Naruto Shippuden Storm 3' },\n      platform: { _text: 'playstation' }\n    }\n  }\n)\n```\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><name>mongoose</name><name>sequelize</name></packages>'\nconst result = xml.parse(input)\n\nassert.deepStrictEqual(\n  result,\n  {\n    packages: {\n      name: [\n        { _text: 'mongoose' },\n        { _text: 'sequelize' }\n      ]\n    }\n  }\n)\n```\n\n#### Parse XML including declaration\n\nPass `{ showDeclaration: true }` as option.\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><name>mongoose</name><name>sequelize</name></packages>'\nconst result = xml.parse(input, { showDeclaration: true })\n\nassert.deepStrictEqual(\n  result,\n  {\n    _declaration: {\n      _attributes: {\n        encoding: 'utf-8',\n        version: 1\n      }\n    },\n    packages: {\n      name: [\n        { _text: 'mongoose' },\n        { _text: 'sequelize' }\n      ]\n    }\n  }\n)\n```\n\n#### Parse XML in verbose mode\n\nPass `{ verbose: true }` as option.\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = '<?xml version=\"1.0\" encoding=\"utf-8\"?><games><name>Naruto Shippuden Storm 3</name><platform>playstation</platform></games>'\nconst result = xml.parse(input, { verbose: true })\nconst expected = {\n  elements: [\n    {\n      type: 'element',\n      name: 'games',\n      elements: [\n        {\n          type: 'element',\n          name: 'name',\n          elements: [\n            {\n              type: 'text',\n              text: 'Naruto Shippuden Storm 3'\n            }\n          ]\n        },\n        {\n          type: 'element',\n          name: 'platform',\n          elements: [\n            {\n              type: 'text',\n              text: 'playstation'\n            }\n          ]\n        },\n      ]\n    }\n  ]\n}\n\nassert.deepStrictEqual(\n  result,\n  expected\n)\n```\n\n### Stringify\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = { game: 'Stardew Valley' }\nconst result = xml.stringify(input)\n\nassert.deepStrictEqual(\n  result,\n  '<?xml version=\"1.0\" encoding=\"utf-8\"?><game>Stardew Valley</game>'\n)\n```\n\n#### Stringify without XML declaration\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = { game: 'Stardew Valley' }\nconst result = xml.stringify(input, { ignoreDeclaration: true })\n\nassert.deepStrictEqual(\n  result,\n  '<game>Stardew Valley</game>'\n)\n```\n\n#### Stringify array\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst input = {\n  packages: [\n    { name: 'lodash' }\n  ]\n}\nconst result = xml.stringify(input)\n\nassert.deepStrictEqual(\n  result,\n  '<?xml version=\"1.0\" encoding=\"utf-8\"?><packages><name>lodash</name></packages>'\n)\n```\n\n### Valid\n\nJust checks if given string is a valid XML\n\n```javascript\nconst assert = require('assert')\nconst { xml } = require('parserblade')\nconst result = xml.valid('phrase<tag />')\n\nassert.equal(\n  result,\n  false\n)\n```\n\n## Stream\n\n### pipeParse\n\nYou may specify in which depth it should emit data, defaults to 0.\n\n```javascript\nconst { Readable } = require('stream')\nconst { xml } = require('parserblade')\nconst input = `\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<info>\n  <name>Naruto Shippuden Storm 3</name>\n  <platform>\n    platform\n    <another>\n      This is another tag\n    </another>\n    <another>\n      Third tag another\n    </another>\n  </platform>\n  <site url=\"netflix\">\n    Netflix\n    <description>\n      Possible description here\n    </description>\n  </site>\n</info>\n`.split('')\n\nconst reader = new Readable({\n  read () {\n    const next = input.shift()\n    if (typeof next === 'string') {\n      this.push(next)\n    } else {\n      this.push(null)\n    }\n  }\n})\n\nreader\n  .pipe(xml.pipeParse())\n  .on('data', console.log)\n  .on('error', console.log)\n  .on('end', () => console.log('stream ended'))\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/onhernandes/code/parserblade/esdocs/manual/yaml.md",
    "name": "./esdocs/manual/yaml.md",
    "content": "# YAML\n\n## Usage\n\nBoth `yaml.parse()` and `yaml.stringify()` accepts the data to be parsed/stringified as the first argument, and an option's object as the second.\n\n### Parse\n\n```javascript\nconst assert = require('assert'')\nconst { yaml } = require('parserblade')\nconst input = 'series: Bleach\\nseasons: 16'\nconst result = yaml.parse(data)\nassert.deepStrictEqual(\n  result,\n  { series: 'Bleach', seasons: 16 }\n)\n```\n\n### Stringify\n\n```javascript\nconst assert = require('assert'')\nconst { yaml } = require('parserblade')\nconst input = { series: 'Bleach', seasons: 16 }\nconst result = yaml.parse(data)\nassert.equal(\n  result,\n  'series: Bleach\\nseasons: 16'\n)\n```\n\n### Valid\n\nJust checks if given string is a valid YAML\n\n```javascript\nconst assert = require('assert')\nconst { yaml } = require('parserblade')\nconst result = yaml.valid('[name:\\nStardew')\n\nassert.equal(\n  result,\n  false\n)\n```\n",
    "static": true,
    "access": "public"
  }
]